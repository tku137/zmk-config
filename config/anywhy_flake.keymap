#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ { chosen { zmk,physical-layout = &small_layout; }; };

/ {
    combos {
        compatible = "zmk,combos";

        /* bluetooth profiles */
        bt_sel_3 {
            bindings = <&bt3>;
            key-positions = <25 15>;
            layers = <4>;
        };

        bt_sel_4 {
            bindings = <&bt4>;
            key-positions = <15 5>;
            layers = <4>;
        };

        /* base layer necessities */
        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <11 12>;
            layers = <0>;
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <17 18>;
            layers = <0>;
        };

        combo_lshift {
            key-positions = <0 10>;
            layers = <0>;
            bindings = <&kp LSHFT>;
            slow-release;
        };

        combo_rshift {
            key-positions = <9 19>;
            layers = <0>;
            bindings = <&kp LSHFT>;
            slow-release;
        };

    };

    macros {
        bt_clr_0: bt_clr_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &bt BT_CLR>;
        };

        bt_clr_1: bt_clr_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &bt BT_CLR>;
        };

        bt_clr_2: bt_clr_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &bt BT_CLR>;
        };

        bt_clr_3: bt_clr_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &bt BT_CLR>;
        };

        bt_clr_4: bt_clr_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &bt BT_CLR>;
        };

        codeblock: backticks_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
            wait-ms = <0>;   /* no delay between keys */
        };

        btick: btick {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(SQT)>;
        };

        euro: euro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N5)>;
        };

        degree: degree {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(SEMI)>;
        };

        greek: greek {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(M)>;
        };
    };

    behaviors {
        bt0: bt0 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&bt BT_SEL 0>, <&bt_clr_0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt1: bt1 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&bt BT_SEL 1>, <&bt_clr_1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt2: bt2 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&bt BT_SEL 2>, <&bt_clr_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt3: bt3 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&bt BT_SEL 3>, <&bt_clr_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bt4: bt4 {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&bt BT_SEL 4>, <&bt_clr_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        /* Magic Shift Setup */

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
            ignore-modifiers;
        };

        tdsc: tapdance_shift_capsword {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&skq LSHIFT>, <&caps_word>;
        };

        /* Hold-Tap wrapper: hold = normal Shift, tap(s) see above */
        ms: magic_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            hold-while-undecided;    /* press Shift immediately, release if it resolves as a tap */
            flavor = "balanced";     /* "tap-preferred" if false positive taps are a problem */
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&tdsc>;
        };

        /* Momentary-Toggle wrapper, hold for layer or toggle on tap */
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        /* Momentary-KP wrapper, hold for layer or tap for &kp */
        mk: hold_tap_layer_kp {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred"; /* faster interrupt logic */
            tapping-term-ms = <200>; /* a bit shorter to have snappier decision for space key */
            require-prior-idle-ms = <175>; /* immediately resolve as tap while fast typing */
            quick-tap-ms = <175>; /* keeps double (or multiple) space taps snappy */
            hold-while-undecided; /* immediate symbol layer on hold, retract hold before sending space */
            bindings = <&mo>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "Base";
            bindings = <
&kp Q       &kp W       &kp E       &kp R       &kp T             &kp Y        &kp U         &kp I         &kp O         &kp P
&kp A       &kp S       &kp D       &kp F       &kp G             &kp H        &kp J         &kp K         &kp L         &kp SEMI
&kp Z       &kp X       &kp C       &kp V       &kp B             &kp N        &kp M         &kp COMMA     &kp DOT       &kp SLASH
&kp LCTRL   &kp LALT    &kp LGUI    &mk 3 SPACE &mo 1             &mo 2        &ms LSHIFT 0  &kp RCTRL     &kp RALT      &kp RGUI
            >;
        };

        nav {
            display-name = "Nav";
            bindings = <
&none       &none       &none       &none       &none             &kp PG_UP    &kp HOME      &kp UP        &kp END       &kp BACKSPACE
&kp LCTRL   &kp LALT    &kp LGUI    &kp LSHFT   &none             &kp PG_DN    &kp LEFT      &kp DOWN      &kp RIGHT     &kp ENTER
&none       &none       &none       &none       &none             &none        &kp ESC       &kp TAB       &none         &kp DEL
&trans      &trans      &trans      &trans      &trans            &trans       &trans        &trans        &trans        &trans
            >;
        };

        num {
            display-name = "Num";
            bindings = <
&none       &kp N7      &kp N8      &kp N9      &kp LPAR          &kp RPAR     &kp PLUS      &kp MINUS     &kp ASTRK     &kp FSLH
&kp N0      &kp N4      &kp N5      &kp N6      &kp DOT           &euro        &kp LSHFT     &kp LGUI      &kp LALT      &kp LCTRL
&none       &kp N1      &kp N2      &kp N3      &kp COMMA         &kp DOLLAR   &none         &none         &none         &none
&trans      &trans      &trans      &trans      &trans            &trans       &trans        &trans        &trans        &trans
            >;
        };

        sym {
            display-name = "Sym";
            bindings = <
&kp CARET   &kp LT      &kp GT      &kp DQT     &kp SQT           &kp PIPE     &kp LBKT      &kp RBKT      &kp DOLLAR    &degree
&kp EXCL    &kp MINUS   &kp PLUS    &kp EQUAL   &kp GRAVE         &kp HASH     &kp LPAR      &kp RPAR      &kp AT        &kp AMPS
&kp TILDE   &kp FSLH    &kp ASTRK   &kp BSLH    &codeblock        &kp UNDER    &kp LBRC      &kp RBRC      &kp PERCENT   &greek
&trans      &trans      &trans      &trans      &trans            &trans       &trans        &trans        &trans        &trans
            >;
        };

        fn {
            display-name = "Func";
            bindings = <
&kp F12     &kp F7      &kp F8      &kp F9      &soft_off         &bt2         &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_BRI_UP
&kp F11     &kp F4      &kp F5      &kp F6      &caps_word        &bt1         &sk RSHFT     &sk RCTRL     &sk RALT      &sk RGUI
&kp F10     &kp F1      &kp F2      &kp F3      &studio_unlock    &bt0         &kp C_PP      &kp C_PREV    &kp C_NEXT    &kp C_BRI_DN
&trans      &trans      &trans      &trans      &none             &none        &trans        &trans        &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fn {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};

